<template>
	<mkit md="## UI.dialog.component" />
	<xButton :configs="configs.btn.open" />
	<xGap t="10" />
	<xButton :configs="configs.btn.defaultBtn" />
	<xGap t="10" />
	<xButton :configs="configs.btn.customBtn" />
</template>

<script>
async function sfc({ defineComponent, State_UI, UI, xU, App }) {
	const { $t } = State_UI;
	return defineComponent({
		TEMPLATE_PLACEHOLDER,
		setup() { },
		mounted() {
			/* 不然会无限弹窗 */
			// if (!window.isOpenAppFirst) {
			// 	this.openAppFirst();
			// 	window.isOpenAppFirst = true;
			// }
		},
		data() {
			return {
				configs: {
					btn: {
						open: {
							text: () => {
								return $t("弹窗里面再打开弹窗").label;
							},
							async onClick() {
								const dialogOptions = UI.dialog.component({
									title: $t("DemoXFormWithForm").label,
									maxmin: true,
									fullscreen: true,
									component: defineComponent({
										props: ["propDialogOptions"],
										methods: {
											open() {
												const dialogOptions = UI.dialog.component({
													title: $t("DemoXFormWithForm").label,
													maxmin: true,
													component: defineComponent({
														props: ["propDialogOptions"],
														methods: {
															setBtn() {
																this.count = ++this.count % 7;
															},
															close() {
																this.propDialogOptions.closeDialog();
															}
														},
														computed: {
															dialogDefautBtn() {
																return {
																	onOk: this.propDialogOptions.closeDialog,
																	onCancel: this.propDialogOptions.closeDialog
																};
															}
														},
														data() {
															return {
																count: 0
															};
														},
														template: `<div class="padding20 flex1">
												<elButton @click="setBtn"></elButton>
										</div>
										<xDialogFooter :configs="dialogDefautBtn"/>`
													})
												});
											},
											close() {
												this.propDialogOptions.closeDialog();
											}
										},
										computed: {
											dialogDefautBtn() {
												return {
													onOk: this.propDialogOptions.closeDialog,
													onCancel: this.propDialogOptions.closeDialog
												};
											}
										},
										data() {
											return {
												count: 0
											};
										},
										template: `<div class="padding20 flex1">
												<elButton @click="open">open</elButton>
										</div>
										<xDialogFooter :configs="dialogDefautBtn"/>`
									})
								});
							}
						},
						defaultBtn: {
							text: () => {
								return $t("配置默认按钮").label;
							},
							async onClick() {
								const dialogOptions = UI.dialog.component({
									title: $t("DemoXFormWithForm").label,
									maxmin: true,
									async onBeforeClose() {
										try {
											await UI.dialog.confirm({
												title: "随便选",
												content: "取消就是不关闭，确定就是关闭"
											});
											return true;
										} catch (error) {
											return false;
										}
									},
									component: defineComponent({
										props: ["propDialogOptions"],
										methods: {
											setBtn() {
												this.count = ++this.count % 7;
											},
											close() {
												this.propDialogOptions.closeDialog();
											}
										},
										computed: {
											dialogDefautBtn() {
												return {
													onOk: this.propDialogOptions.closeDialog,
													hideOk: [2, 4].includes(this.count),
													disabledOk: [3, 5, 6].includes(this.count),
													onCancel: this.propDialogOptions.closeDialog,
													hideCancel: [1, 3].includes(this.count),
													disabledCancel: [2, 4, 6].includes(this.count),
													textOk: this.$t("这是确定").label,
													textCancel: this.$t("取消").label
												};
											}
										},
										data() {
											return {
												count: 0
											};
										},
										template: `<div class="padding20 flex1">
											<p>演示使用bundless的形式，使用template，不使用jsx</p>
											<ul>
												<li>作为弹出的组件，有prop字段propDialogOptions，本身是传入dialog的参数options</li>
												<li>经过实例化，添加了dialog jQuery 实例  _dialog$ele</li>
												<li>添加了component 实例 _contentInstance</li>
												<li>propDialogOptions._dialog$ele.attr("id")=>当前DOM id {{propDialogOptions._dialog$ele.attr("id")}}</li>
												<li>this.propDialogOptions._contentInstance = this;</li>
												<li>this.propDialogOptions._dialog$ele = _dialog$ele; </li>
											</ul>
											<div class="flex">
												<xGap f="1" />
												<elButton @click="setBtn">count++: {{count}}</elButton>
											</div>
										</div>
										<xDialogFooter :configs="dialogDefautBtn"/>`
									})
								});
							}
						},
						customBtn: {
							text: () => {
								return $t("纯自定义按钮").label;
							},
							async onClick() {
								const dialogOptions = UI.dialog.component({
									title: $t("DemoXFormWithForm").label,
									component: defineComponent({
										props: ["propDialogOptions"],
										template: `<div class="padding20 flex1">
											<p>演示使用bundless的形式，使用template，不使用jsx</p>
										</div>
										<xDialogFooter>
											<elButton @click="propDialogOptions.closeDialog">
												自定义按钮
											</elButton>
											<elButton @click="propDialogOptions.closeDialog">
												自定义按钮
											</elButton>
											<elButton @click="propDialogOptions.closeDialog">
												自定义按钮
											</elButton>
											<elButton @click="propDialogOptions.closeDialog">
												自定义按钮
											</elButton>
											<elButton @click="propDialogOptions.closeDialog">
												自定义按钮
											</elButton>
										</xDialogFooter>`
									})
								});
							}
						}
					}
				}
			};
		},
		methods: {
			openAppFirst() {
				const dialogOptions = UI.dialog.component({
					title: $t("transition").label,
					maxmin: true,
					fullscreen: true,
					component: App
				});
			}
		}
	});
}
</script>
